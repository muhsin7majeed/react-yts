{"version":3,"sources":["components/Nav.js","components/Search.js","components/Movie.js","components/MovieList.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","className","Component","Search","Movie","props","movie","poster_path","src","concat","alt","title","release_date","overview","console","log","MovieList","movieArr","map","i","key","Main","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","movieArray","movieGenre","searchQuery","apiKey","process","_this2","onSubmit","event","preventDefault","fetch","then","data","json","setState","toConsumableArray","results","type","onChange","e","target","value","class","App","Nav_Nav","Search_Search","Main_Main","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mSAEqBA,0LAEb,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,sBALmBC,cCAZC,0LAEb,OACIL,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oBAJoBE,0BCArB,SAASE,EAAMC,GAC1B,OACIP,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,WACgC,MAA3BK,EAAMC,MAAMC,YACTT,EAAAC,EAAAC,cAAA,OACIC,UAAU,eACVO,IAAI,2EAGRV,EAAAC,EAAAC,cAAA,OACIC,UAAU,eACVO,IAAG,mCAAAC,OACCJ,EAAMC,MAAMC,aAEhBG,IAAI,MAIZZ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcI,EAAMC,MAAMK,OACxCb,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,gBACkBI,EAAMC,MAAMM,cAE9Bd,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAcI,EAAMC,MAAMO,UACtCC,QAAQC,IAAIV,EAAMC,MAAMC,cAE7BT,EAAAC,EAAAC,cAAA,cC1BD,SAASgB,EAAUX,GAC9B,OACIP,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACVI,EAAMY,SAASC,IAAI,SAACZ,EAAOa,GACxB,OAAOrB,EAAAC,EAAAC,cAACI,EAAD,CAAOgB,IAAKD,EAAGb,MAAOA,YCL5Be,cACjB,SAAAA,EAAYhB,GAAO,IAAAiB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMpB,KACDwB,MAAQ,CACTC,WAAY,GACZC,WAAY,GACZC,YAAa,IAEjBV,EAAKW,OAASC,mCAPCZ,wEASV,IAAAa,EAAAV,KAqBL,OACI3B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAcmC,SAtBjB,SAAAC,GACjBA,EAAMC,iBACNC,MAAK,qDAAA9B,OAEG0B,EAAKF,OAFR,WAAAxB,OAGS0B,EAAKN,MAAMG,cAEpBQ,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAC,GACFN,EAAKQ,SAAS,CACVb,WAAWP,OAAAqB,EAAA,EAAArB,CAAKkB,EAAKI,eAazB/C,EAAAC,EAAAC,cAAA,SACI8C,KAAK,OACL7C,UAAU,aACV8C,SAZK,SAAAC,GACjBA,EAAEV,iBACFH,EAAKQ,SAAS,CACVX,YAAagB,EAAEC,OAAOC,WAWlBpD,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACdH,EAAAC,EAAAC,cAAA,KAAGmD,MAAM,oBAGjBrD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACfH,EAAAC,EAAAC,cAACgB,EAAD,CAAWC,SAAUQ,KAAKI,MAAMC,qBA5Cd5B,aCIbkD,mLAGb,OACItD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACXH,EAAAC,EAAAC,cAACqD,EAAD,MACAvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACnBH,EAAAC,EAAAC,cAACsD,EAAD,MACAxD,EAAAC,EAAAC,cAACuD,EAAD,gBATiBrD,aCKbsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.c828950f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Nav extends Component {\n    render() {\n        return (\n          <div>\n            <div className=\"nav-container\">\n              <h1 className=\"nav-logo\">MoviesApp</h1>\n\n            </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport \"./css/Style.css\";\nexport default class Search extends Component {\n    render() {\n        return (\n            <div>\n                <div>\n                    \n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport \"./css/Movies.css\";\nexport default function Movie(props) {\n    return (\n        <div>\n            <div className=\"movie-card\">\n                <div>\n                    {props.movie.poster_path == null ? (\n                        <img\n                            className=\"movie-poster\"\n                            src=\"https://1080motion.com/wp-content/uploads/2018/06/NoImageFound.jpg.png\"\n                        />\n                    ) : (\n                        <img\n                            className=\"movie-poster\"\n                            src={`https://image.tmdb.org/t/p/w185/${\n                                props.movie.poster_path\n                            }`}\n                            alt=\" \"\n                        />\n                    )}\n\n                    <h1 className=\"movie-name\">{props.movie.title}</h1>\n                    <p className=\"movie-date\">\n                        Released on :{props.movie.release_date}\n                    </p>\n                    <p className=\"movie-disc\">{props.movie.overview}</p>\n                    {console.log(props.movie.poster_path)}\n                </div>\n                <div />\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport Movie from \"./Movie\";\nimport \"./css/Movies.css\";\nexport default function MovieList(props) {\n    return (\n        <div>\n            <div className=\"movie-container\">\n                {props.movieArr.map((movie, i) => {\n                    return <Movie key={i} movie={movie} />;\n                })}\n            </div>\n        </div>\n    );\n}\n{\n    /* ; */\n}\n","import React, { Component } from \"react\";\nimport MovieList from \"./MovieList\";\nimport Movie from \"./Movie\";\nexport default class Main extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            movieArray: [],\n            movieGenre: [],\n            searchQuery: \"\"\n        };\n        this.apiKey = process.env.react_app_api;\n    }\n    render() {\n        const handleSubmit = event => {\n            event.preventDefault();\n            fetch(\n                `https://api.themoviedb.org/3/search/movie?api_key=${\n                    this.apiKey\n                }&query=${this.state.searchQuery}`\n            )\n                .then(data => data.json())\n                .then(data => {\n                    this.setState({\n                        movieArray: [...data.results]\n                    });\n                });\n        };\n        const handleChange = e => {\n            e.preventDefault();\n            this.setState({\n                searchQuery: e.target.value\n            });\n        };\n        return (\n            <div>\n                <form className=\"search-form\" onSubmit={handleSubmit}>\n                    <input \n                        type=\"text\"\n                        className=\"search-bar\"\n                        onChange={handleChange}\n                    />\n                    <button className=\"search-btn\">\n                        <i class=\"fas fa-search\" />\n                    </button>\n                </form>\n                <div className=\"movies-container\" />\n                <MovieList movieArr={this.state.movieArray} />\n            </div>\n        );\n    }\n}\n","import \"./App.css\";\nimport Nav from \"./components/Nav\";\nimport Search from \"./components/Search\";\nimport React, { Component } from \"react\";\nimport Main from \"./components/Main\";\n\n\nexport default class App extends Component {\n\n    render() {\n        return (\n            <div>\n                <div className=\"\">\n                    <Nav />\n                    <div className=\"\">\n                <Search />\n                <Main  />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}